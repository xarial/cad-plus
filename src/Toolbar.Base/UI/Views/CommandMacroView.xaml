<UserControl x:Class="Xarial.CadPlus.CustomToolbar.UI.Views.CommandMacroView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Xarial.CadPlus.CustomToolbar.UI.Views"
             xmlns:wpf="clr-namespace:Xarial.XToolkit.Wpf;assembly=Xarial.XToolkit.Wpf"
             xmlns:ctrls="clr-namespace:Xarial.XToolkit.Wpf.Controls;assembly=Xarial.XToolkit.Wpf"
             xmlns:xconv="clr-namespace:Xarial.XToolkit.Wpf.Converters;assembly=Xarial.XToolkit.Wpf"
			 xmlns:conv="clr-namespace:Xarial.CadPlus.Toolbar.UI.Converters"
             xmlns:val="clr-namespace:Xarial.CadPlus.Toolbar.UI.ValidationRules"
             xmlns:vm="clr-namespace:Xarial.CadPlus.CustomToolbar.UI.ViewModels"
             xmlns:enums="clr-namespace:Xarial.CadPlus.CustomToolbar.Enums"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DataContext="{x:Type vm:CommandMacroVM}"
             d:DesignHeight="500" d:DesignWidth="300">
    <UserControl.Resources>
        <wpf:BindingProxy x:Key="this" Data="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:CommandMacroView}}}"/>
        <conv:HasEnumFlagToVisibilityConverter x:Key="hasEnumToVisConv"/>
        <xconv:MatchValueUniversalConverter TargetValue="{x:Static enums:ToggleButtonStateCode_e.None}" x:Key="stateCodeEnabledConv">
            <xconv:MatchValueUniversalConverter.TrueValue>
                <sys:Boolean>
                    False
                </sys:Boolean>
            </xconv:MatchValueUniversalConverter.TrueValue>
            <xconv:MatchValueUniversalConverter.FalseValue>
                <sys:Boolean>
                    True
                </sys:Boolean>
            </xconv:MatchValueUniversalConverter.FalseValue>
        </xconv:MatchValueUniversalConverter>
    </UserControl.Resources>
    <StackPanel Orientation="Vertical" Grid.IsSharedSizeScope="True">
        <GroupBox Header="Style">
            <local:CommandBaseView WorkingDirectory="{Binding Path=WorkingDirectory, RelativeSource={RelativeSource AncestorType={x:Type local:CommandMacroView}}}" />
        </GroupBox>
        <GroupBox Header="Macro">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="Header" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Margin="2" VerticalAlignment="Center"  Text="Path:" Grid.Column="0" Grid.Row="0" />
                <Grid Grid.Column="1" Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*" />
                        <ColumnDefinition Width="Auto" />
                    </Grid.ColumnDefinitions>
                    <TextBox Grid.Column="0" Margin="2" >
                        <TextBox.Text>
                            <Binding Path="MacroPath" UpdateSourceTrigger="PropertyChanged">
                                <Binding.ValidationRules>
                                    <val:FileExistsValidationRule ValidatesOnTargetUpdated="True">
                                        <val:FileExistsValidationRule.Parameters>
                                            <val:FileExistsValidationRuleParameters WorkingDirectory="{Binding Path=Data.WorkingDirectory, Source={StaticResource this}}"/>
                                        </val:FileExistsValidationRule.Parameters>
                                    </val:FileExistsValidationRule>
                                </Binding.ValidationRules>
                            </Binding>
                        </TextBox.Text>
                    </TextBox>
                    <Button Grid.Column="1" Margin="2" Command="{Binding Path=BrowseMacroPathCommand}">
                        <TextBlock Text="Browse..." Margin="5 0" />
                    </Button>
                </Grid>

                <TextBlock Text="Entry Point:" VerticalAlignment="Center"  Grid.Column="0" Grid.Row="1" Margin="2" />
                <ComboBox SelectedItem="{Binding Path=EntryPoint, UpdateSourceTrigger=PropertyChanged}"
					  Grid.Column="1" Grid.Row="1" Margin="2" ItemsSource="{Binding Path=EntryPoints}"/>
                <TextBlock Text="Arguments:" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="2" />
                <Grid Grid.Column="1" Grid.Row="2">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Text="{Binding Path=Arguments, UpdateSourceTrigger=PropertyChanged}" Margin="2"/>
                    <Button Style="{StaticResource {x:Static ToolBar.ButtonStyleKey}}" Focusable="False"
                            Grid.Column="2" HorizontalAlignment="Right"
                            ToolTip="About macro arguments" Width="24" Height="24" Click="OnHelpClicked">
                        <Image Source="/Toolbar.Module;component/Resources/help-icon.png"/>
                    </Button>
                </Grid>
            </Grid>
        </GroupBox>
        <GroupBox Header="Behavior">
            <Grid>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition SharedSizeGroup="Header" Width="100" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <TextBlock Text="Triggers:" VerticalAlignment="Center"  Grid.Column="0" Grid.Row="0" Margin="2" />
                <ctrls:FlagEnumComboBox Grid.Column="1" Grid.Row="0" Margin="2" Value="{Binding Path=Triggers}"/>

                <TextBlock Text="Scope:" VerticalAlignment="Center" Grid.Column="0" Grid.Row="1" Margin="2" />
                <ctrls:FlagEnumComboBox Grid.Column="1" Grid.Row="1" Margin="2" Value="{Binding Path=Scope}"/>

                <TextBlock Text="Location:" VerticalAlignment="Center" Grid.Column="0" Grid.Row="2" Margin="2"
                           Visibility="{Binding Path=Triggers, Converter={StaticResource hasEnumToVisConv}, ConverterParameter={x:Static enums:Triggers_e.Button}}"/>
                <ctrls:FlagEnumComboBox Grid.Column="1" Grid.Row="2" Margin="2" Value="{Binding Path=Location}"
                            Visibility="{Binding Path=Triggers, Converter={StaticResource hasEnumToVisConv}, ConverterParameter={x:Static enums:Triggers_e.Button}}"/>

                <TextBlock Text="Toggle Button State Code:" TextWrapping="Wrap" VerticalAlignment="Top" Grid.Column="0" Grid.Row="3" Margin="2"
                           Visibility="{Binding Path=Triggers, Converter={StaticResource hasEnumToVisConv}, ConverterParameter={x:Static enums:Triggers_e.ToggleButton}}"/>
                
                <Grid Grid.Column="1" Grid.Row="3"
                      Visibility="{Binding Path=Triggers, Converter={StaticResource hasEnumToVisConv}, ConverterParameter={x:Static enums:Triggers_e.ToggleButton}}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ctrls:EnumComboBox Margin="2" Grid.Row="0" Value="{Binding Path=ToggleButtonStateCodeType}"/>

                    <TextBox Grid.Row="1" Margin="2" 
                         IsEnabled="{Binding Path=ToggleButtonStateCodeType, Converter={StaticResource stateCodeEnabledConv}}" 
                         AcceptsReturn="True" Text="{Binding Path=ToggleButtonStateCode}" Height="40"></TextBox>
                    <CheckBox Grid.Row="2" 
                          IsEnabled="{Binding Path=ToggleButtonStateCodeType, Converter={StaticResource stateCodeEnabledConv}}" IsChecked="{Binding Path=ResolveButtonStateCodeOnce}" Margin="2">Cache State Value</CheckBox>
                </Grid>

                <CheckBox Margin="2" IsChecked="{Binding Path=UnloadAfterRun}" Grid.Row="4" Grid.ColumnSpan="2">Unload After Run</CheckBox>

            </Grid>
        </GroupBox>
    </StackPanel>
</UserControl>